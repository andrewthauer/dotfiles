#!/usr/bin/env nu

# Push a Jujutsu revision to a github remote branch.
def main [
  --revision (-r): string        # The Jujutsu revision to push
  --branch (-b): string          # The git branch to push to
  --remote: string = "origin"    # The git remote to push to (defaults to 'origin')
  --force                        # Force push to the remote branch
  --dry-run                      # Print commands without executing them
] {
  check_dependencies

  if ($revision | is-empty) { error make { msg: "Error: Missing required argument: revision" } }
  if ($branch | is-empty) { error make { msg: "Error: Missing required argument: branch" } }

  let commit = (get_commit_for_revision $revision)
  if ($commit | is-empty) {
    error make { msg: $"Error: Could not find commit for revision '($revision)'" }
  }

  if ($dry_run) {
    print "TODO"
  } else {
    git ...[
      "push"
     ...(if $force { ["--force"] } else { [] })
      $remote
      $"($commit):main"
    ]
  }
}

def check_dependencies [] {
  if (which git | is-empty) {
    error make { msg: "Error: git is not installed" }
  }

  if (which jj | is-empty) {
    error make { msg: "Error: jj is not installed" }
  }
}

def get_commit_for_revision [rev: string] {
  jj log --revisions $rev --quiet --no-graph --template 'self.commit_id()'
}
