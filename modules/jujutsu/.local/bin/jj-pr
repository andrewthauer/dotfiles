#!/usr/bin/env nu

# Managed GitHub Pull Requests for Jujutsu revisions.
def "main" [] {
  help main
}

# Create a PR for a Jujutsu revision
def "main create" [
  --revision (-r): string       # The Jujutsu revision to create a PR for
  --bookmark (-b): string       # The named bookmark / branch name to use if revision does not have one associated (optional)
  --draft                       # Create a draft PR
  --dry-run                     # Print commands without executing them
] {
  check_dependencies

  if ($revision | is-empty) { error make { msg: "Error: revision is required" } }

  let desc = (description $revision)
  let title = ($desc | split row "\n" | first)
  let body = ($desc | split row "\n" | skip 2 | str join "\n")

  if ($title | is-empty) { error make { msg: "Error: Revision has no desciption" } }
  if ($desc | is-empty) { error make { msg: "Error: Could not find description for revision" } }

  if $dry_run {
    let draft_text = if $draft { "draft " } else { "" }
    print $"Would create ($draft_text)PR:"
    print $"  revision: ($revision)"
    print $"  bookmark: ($bookmark)"
    print $"  title: ($title)"
    print $"  body:"
    print $body
    return
  }

  # If the revision has a tracking branch, use that
  mut branch = (get_tracking_branch $revision)

  # If no current tracking branch or bookmark use supplied bookmark as the branch
  if ($branch | is-empty) and (not ($bookmark | is-empty)) and (get_bookmark $revision | is-empty) {
    jj bookmark create $bookmark -r $revision | complete
    if $env.LAST_EXIT_CODE != 0 {
      error make { msg: $"Failed to create bookmark ($bookmark)" }
    }

    $branch = $bookmark
  } else if ($branch | is-empty) {
    jj git push --change $revision | complete
    if $env.LAST_EXIT_CODE != 0 {
      error make { msg: "Failed to push changes" }
    }

    $branch = (get_tracking_branch $revision)
    if ($branch | is-empty) {
      error make { msg: "Failed to get branch after push" }
    }
  }

  jj git push --bookmark $branch --allow-new | complete
  if $env.LAST_EXIT_CODE != 0 {
    error make { msg: $"Failed to push bookmark ($bookmark)" }
  }

  gh pr create --head $branch --title $title ...[
    ...(if $draft { ["--draft"] } else { [] })
  ]
  if $env.LAST_EXIT_CODE != 0 {
    error make { msg: $"Failed to create PR for branch '($branch)'" }
  }

  let draft_text = if $draft { " draft" } else { "" }
  print $"Successfully created($draft_text) PR for branch '($branch)'"
}

# View a PR for a Jujutsu revision
def "main view" [
  --revision (-r): string = "@"   # The Jujutsu revision to create a PR for
  --web                           # Open the PR in a web browser
] {
  check_dependencies

  if ($revision | is-empty) {
    print "Error: Missing required argument: revision"
    exit 1
  }

  let branch = (get_tracking_branch $revision)

  gh pr view ...[
    $branch
    ...(if $web { ["--web"] } else { [] })
  ]
}

def check_dependencies [] {
  if (which git | is-empty) {
    error make { msg: "Error: git is not installed" }
  }

  if (which jj | is-empty) {
    error make { msg: "Error: jj is not installed" }
  }
}

def description [rev: string] {
  jj log --no-graph --no-pager --quiet --template 'self.description()' --revisions $rev
}

def get_bookmark [rev: string] {
  jj bookmark list --template "name" --revisions $rev
}

def get_tracking_branch [rev: string ] {
  jj bookmark list --tracked --template "if(tracking_present, name)" --revisions $rev
}
