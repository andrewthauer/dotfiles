#!/usr/bin/env nu

# Set up a colocated Jujutsu repository in the current Git repository.
def main [
  --dry-run      # Print commands without executing them
] {
  check_dependencies

  if not (is_git_repo) { error make { msg: "Error: Not in a Git repository" } }
  if (is_jj_initialized) { error make { msg: "Repository is already initialized with Jujutsu" } }
  if (has_uncommitted_changes) { error make { msg: "Error: Repository has uncommitted changes" } }
  if not (is_on_default_branch) { error make { msg: "Error: Not on the default branch" } }

  let git_root = (get_git_root)
  let default_branch = (get_default_branch)
  let git_email = (git -C $git_root config user.email | str trim)
  let remote = "origin"

  jj git init --colocate $git_root
  jj --repository $git_root bookmark track $"($default_branch)@($remote)"
  jj --repository $git_root config set --repo user.email $git_email
  jj describe --reset-author --no-edit
}

def check_dependencies [] {
  if (which git | is-empty) {
    error make { msg: "Error: git is not installed" }
  }

  if (which jj | is-empty) {
    error make { msg: "Error: jj is not installed" }
  }
}

def execute [
  cmd: string
  dry_run: bool
] {
  if $dry_run {
    print $cmd
  } else {
    nu -c $cmd
  }
}

def get_git_root [] {
  git rev-parse --show-toplevel
}

def is_git_repo [] {
  do { git rev-parse --git-dir } | complete | $env.LAST_EXIT_CODE == 0
}

def has_uncommitted_changes [] {
  not (do { git diff --quiet HEAD } | complete | $env.LAST_EXIT_CODE == 0)
}

def is_on_default_branch [] {
  let current_branch = (git branch --show-current | str trim)
  let default_branch = (get_default_branch)
  $current_branch == $default_branch
}

def get_default_branch [] {
  git symbolic-ref --short refs/remotes/origin/HEAD
    | sed 's@^origin/@@'
    | str trim
}

def is_jj_initialized [] {
  let git_root = (get_git_root)
  ($git_root + "/.jj") | path exists
}
