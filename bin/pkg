#!/usr/bin/env bash
# Summary:
#   Manage system packages

set -o errexit -o pipefail -o noclobber

DOTFILES_HOME="${DOTFILES_HOME:-$(cd "$(dirname "${BASH_SOURCE[0]}")/.." &>/dev/null && pwd)}"
PATH="${DOTFILES_HOME}/bin:${PATH}"

usage() {
  local cmd
  cmd="$(basename "$0")"
  echo "SUMMARY"
  echo "  Manage system packages"
  echo ""
  echo "USAGE: $cmd [flags] [command]"
  echo ""
  echo "COMMANDS"
  echo "  install, add     Installs package(s)"
  echo "  uninstall, rm    Uninstalls package(s)"
  echo "  exec, x          Execute a command"
  echo "  help             Prints this message"
  echo ""
  echo "FLAGS"
  echo "  --type, -t       Package manager (apt, brew, cargo, dnf, nix-env, pacman, yum)"
  echo
  echo "EXAMPLES"
  echo "  $cmd install git zsh bash"
  echo "  $cmd install --type brew git"
}

init_package_manager() {
  local pkg_mgr="$1"

  #
  # TODO: Validate if package manager command exists
  #

  # Skip package manager updates
  if [ "$SKIP_PACKAGE_MANGER_UPDATE" == "true" ]; then
    return
  fi

  case ${pkg_mgr} in
    "apt") $sudo_cmd apt update -y -q ;;
    "dnf") ;;
    "yum") ;;
    "pacman") ;;
    "brew")
      if ! command -v brew &>/dev/null; then
        # shellcheck disable=SC1091
        source "${DOTFILES_HOME}/modules/homebrew/.config/homebrew/shellenv.sh"
      fi
      ;;
    "cargo")
      if ! command -v cargo-binstall &>/dev/null; then
        echo "Installing cargo-binstall..."
        if [[ "$(uname)" == "Darwin" ]]; then
          brew install cargo-binstall
        else
          cargo install cargo-binstall
        fi
      fi
      ;;
    "nix")
      if ! command -v nix-env &>/dev/null; then
        # shellcheck disable=SC1091
        source "${DOTFILES_HOME}/modules/nix/.config/profile.d/nix.sh"
      fi
      ;;
    *) ;;
  esac
}

handle_brew_packages() {
  local operation="$1"
  shift
  local to_process=()

  # Get list of all installed packages once
  local installed_packages
  installed_packages=$(brew list --formula 2>/dev/null | tr '\n' ' ')

  for pkg in "$@"; do
    if [[ " $installed_packages " == *" $pkg "* ]]; then
      # Package is installed
      if [[ "$operation" == "uninstall" ]]; then
        to_process+=("$pkg")
      else
        echo "Package $pkg already installed"
      fi
    else
      # Package is not installed
      if [[ "$operation" == "install" ]]; then
        to_process+=("$pkg")
      else
        echo "Package $pkg not installed"
      fi
    fi
  done

  if [ ${#to_process[@]} -gt 0 ]; then
    brew "$operation" "${to_process[@]}"
  fi
}

install_package() {
  local pkgs=("$*")

  case ${pkg_mgr} in
    "apt")
      # shellcheck disable=SC2068
      $sudo_cmd apt install -y ${pkgs[@]}
      ;;
    "brew")
      # shellcheck disable=SC2068
      handle_brew_packages "install" ${pkgs[@]}
      ;;
    "cargo")
      # shellcheck disable=SC2068
      cargo binstall -y ${pkgs[@]}
      ;;
    "dnf")
      # shellcheck disable=SC2068
      $sudo_cmd dnf install -y ${pkgs[@]}
      ;;
    "nix-env")
      # shellcheck disable=SC2068
      for pkg in ${pkgs[@]}; do
        nix-env -iA nixpkgs."$pkg"
      done
      ;;
    "pacman")
      # shellcheck disable=SC2068
      $sudo_cmd pacman -S ${pkgs[@]}
      ;;
    "yum")
      # shellcheck disable=SC2068
      $sudo_cmd yum install -y ${pkgs[@]}
      ;;
    *) ;;
  esac
}

uninstall_package() {
  local pkgs=("$*")

  case ${pkg_mgr} in
    "apt")
      # shellcheck disable=SC2068
      $sudo_cmd apt remove -y ${pkgs[@]}
      ;;
    "brew")
      # shellcheck disable=SC2068
      handle_brew_packages "uninstall" ${pkgs[@]}
      ;;
    "cargo")
      # shellcheck disable=SC2068
      cargo uninstall ${pkgs[@]}
      ;;
    "dnf")
      # shellcheck disable=SC2068
      $sudo_cmd dnf remove -y ${pkgs[@]}
      ;;
    "nix-env")
      # shellcheck disable=SC2068
      for pkg in ${pkgs[@]}; do
        nix-env -e "$pkg"
      done
      ;;
    "pacman")
      # shellcheck disable=SC2068
      $sudo_cmd pacman -R ${pkgs[@]}
      ;;
    "yum")
      # shellcheck disable=SC2068
      $sudo_cmd yum remove -y ${pkgs[@]}
      ;;
    *)
      echo "ERROR: Uninstall not implemented for package manager: $pkg_mgr"
      exit 1
      ;;
  esac
}

main() {
  local pos_args=""

  # shellcheck disable=SC2086
  pkg_mgr="$(os-info --package-manager)"

  # disable usage of sudo if requested
  [[ "$DOTFILES_NO_SUDO" -eq 0 ]] && sudo_cmd="sudo " || sudo_cmd=""

  while (("$#")); do
    case "$1" in
      --type | -t)
        pkg_mgr="$2"
        shift 2
        ;;
      --skip-update | -s)
        SKIP_PACKAGE_MANGER_UPDATE="true"
        shift 1
        ;;
      --no-sudo)
        DOTFILES_NO_SUDO=1
        sudo_cmd="sudo " || sudo_cmd=""
        shift 1
        ;;
      --) # end argument parsing
        shift
        break
        ;;
      *) # preserve positional arguments
        pos_args="$pos_args $1"
        shift
        ;;
    esac
  done

  # Set positional arguments in their proper place
  eval set -- "$pos_args"

  cmd="$1"
  [ -n "$cmd" ] && shift

  case "$cmd" in
    install | i)
      init_package_manager "$pkg_mgr"
      install_package "$@"
      ;;
    uninstall | u)
      init_package_manager "$pkg_mgr"
      uninstall_package "$@"
      ;;
    exec | x)
      init_package_manager "$pkg_mgr"
      exec "${@}"
      ;;
    help | --help | -h)
      usage
      ;;
    *)
      usage
      ;;
  esac
}

main "$@"
