#!/usr/bin/env bash
# Summary:
#   Manage dotfile modules
#
# Usage:
#   dotfiles-module

set -o errexit -o pipefail -o noclobber

usage() {
  echo "USAGE: dotfiles module [command]"
  echo ""
  echo "COMMANDS:"
  echo "  list, ls           List modules"
  echo "  link, ln           Link a module"
  echo "  unlink, rm         Unlink a module"
  echo "  read-file, r       Read a modules file"
  echo "  write-file, w      Write a modules file"
  echo "  file-path          Get a modules file location"
  echo "  help               Prints this message"
  echo ""
  echo "FLAGS:"
  echo "  --help, -h   Prints help"
}

link() {
  stow_modules -S "$@"
}

unlink() {
  stow_modules -D "$@"
}

list_modules() {
  cmd="$1"
  [ -n "$cmd" ] && shift

  case "$cmd" in
    --all | -a)
      ls -1 "$DOTFILES_DIR/modules"
      ;;
    help | --help | -h)
      echo "USAGE: dotfiles module [command]"
      echo ""
      echo "FLAGS:"
      echo "  --all, -a    List all modules"
      ;;
    *)
      read_modules_file | sort
      ;;
  esac
}

stow_modules() {
  local stow_flag="$1"
  local modules=()
  local modules_file
  local modules_dir="$DOTFILES_DIR/modules"
  local oper_text=""

  case "$2" in
    --all | -a) modules=("$(list_modules --all)") ;;
    --file | -f)
      modules_file="$3"
      if [ -f "$modules_file" ]; then
        modules=("$(read_modules_file "$modules_file")")
      else
        echo "Module file not found: $modules_file"
        exit 1
      fi
      ;;
    *) modules=("${@:2}") ;;
  esac

  if [ "${#modules[@]}" -eq 0 ]; then
    modules_file="$(get_modules_file)"

    if [ ! -f "$modules_file" ]; then
      echo "Module file not found: $modules_file"
      exit 1
    fi

    modules=("$(read_modules_file "$modules_file")")
  fi

  case "$stow_flag" in
    -S) oper_text="Linking" ;;
    -D) oper_text="Unlinking" ;;
    -R) oper_text="Relinking" ;;
    *)
      echo "Unknown flag: $stow_flag"
      exit 1
      ;;
  esac

  # shellcheck disable=SC2068
  for module in ${modules[@]}; do
    local module_path="$modules_dir/$module"

    if [ ! -d "$module_path" ]; then
      echo "Module $module does not exist"
      exit 1
    fi

    echo "$oper_text module $module"
    pkg exec --skip-update "stow -t ${HOME} -d $modules_dir $stow_flag $module"
  done
}

get_modules_file() {
  echo "${DOTFILES_MODULES_FILE:-$DOTFILES_DIR/modules.txt}"
}

read_modules_file() {
  local modules_file="${1:-$(get_modules_file)}"

  if [ ! -f "$modules_file" ]; then
    echo "Module file not found: $modules_file"
    exit 1
  fi

  cat <"$modules_file" | sed -e 's/[[:space:]]*#.*// ; /^[[:space:]]*$/d'
}

write_modules_file() {
  local modules_file
  local modules=()

  case "$1" in
    --file | -f)
      modules_file="$2"
      shift 2
      ;;
    *) ;;
  esac

  local modules=("${@}")

  if [ "${#modules[@]}" -eq 0 ]; then
    echo "No modules specified"
    exit 1
  fi

  if [ -z "$modules_file" ]; then
    modules_file="$(get_modules_file)"
  fi

  cat <<EOF >|"$modules_file"
$(
    IFS=$'\n'
    echo "${modules[*]}"
  )
EOF
}

main() {
  cmd="$1"
  [ -n "$cmd" ] && shift

  case "$cmd" in
    list | ls)
      list_modules "$@"
      ;;
    link | ln)
      link "$@"
      ;;
    unlink | rm)
      unlink "$@"
      ;;
    read-file | r)
      read_modules_file "$@"
      ;;
    write-file | w)
      write_modules_file "$@"
      ;;
    file-path)
      get_modules_file
      ;;
    help | --help | -h)
      usage
      ;;
    *)
      usage
      ;;
  esac
}

main "$@"
