#!/usr/bin/env bash
# Summary:
#   Manage dotfile modules
#
# Usage:
#   dotfiles-module

set -o errexit -o pipefail -o noclobber

usage() {
  echo "USAGE: dotfiles module [command]"
  echo ""
  echo "COMMANDS:"
  echo "  list, ls           List modules"
  echo "  link, ln           Link a module"
  echo "  unlink, rm         Unlink a module"
  echo "  add                Add module(s) to modules file"
  echo "  install, i         Install module(s) (runs install.sh if present)"
  echo "  read-file, r       Read a modules file"
  echo "  write-file, w      Write a modules file"
  echo "  file-path          Get a modules file location"
  echo "  help               Prints this message"
  echo ""
  echo "GLOBAL FLAGS:"
  echo "  --help, -h         Prints help"
  echo ""
  echo "COMMAND-SPECIFIC FLAGS:"
  echo "  list:"
  echo "    --all, -a        List all modules"
  echo "  link/unlink:"
  echo "    --all, -a        Link/unlink all modules"
  echo "    --file, -f FILE  Use specific modules file"
  echo "    --no-file        Don't use a modules file"
  echo "    --continue-on-error  Skip missing modules and errors instead of failing"
  echo "  add:"
  echo "    --file, -f FILE  Target modules file (optional)"
  echo "  install:"
  echo "    --file, -f FILE  Target modules file (optional)"
  echo "    --no-file        Don't add modules to modules file after install"
  echo "  write-file:"
  echo "    --file, -f FILE  Specify output file"
}

link() {
  stow_modules -S "$@"
}

unlink() {
  remove_modules_from_file "$@"
}

list_modules() {
  cmd="$1"
  [ -n "$cmd" ] && shift

  case "$cmd" in
    --all | -a)
      ls -1 "$DOTFILES_HOME/modules"
      ;;
    help | --help | -h)
      echo "USAGE: dotfiles module [command]"
      echo ""
      echo "FLAGS:"
      echo "  --all, -a    List all modules"
      ;;
    *)
      read_modules_file | sort
      ;;
  esac
}

stow_modules() {
  local stow_flag="$1"
  shift 1

  local modules=()
  local modules_file
  local modules_dir="$DOTFILES_HOME/modules"
  local oper_text=""
  local continue_on_error=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --all | -a)
        modules=("$(list_modules --all)")
        shift 1
        ;;
      --file | -f)
        modules_file="$2"
        if [ ! -f "$modules_file" ]; then
          echo "Module file not found: $modules_file"
          exit 1
        fi
        modules=("$(read_modules_file "$modules_file")")
        shift 2
        ;;
      --no-file)
        modules_file=0
        shift 1
        ;;
      --continue-on-error)
        continue_on_error=true
        shift 1
        ;;
      --*)
        echo "Error: Unknown option: $1" >&2
        exit 1
        ;;
      *)
        modules+=("$1")
        shift
        ;;
    esac
  done

  if [ "${#modules[@]}" -eq 0 ] && [ -z "$modules_file" ] && [ "$no_file_flag" = false ]; then
    modules_file="$(get_modules_file)"

    if [ ! -f "$modules_file" ]; then
      echo "Module file not found: $modules_file"
      exit 1
    fi

    modules=("$(read_modules_file "$modules_file")")
  fi

  case "$stow_flag" in
    --stow | -S) oper_text="Linking" ;;
    --delete | -D) oper_text="Unlinking" ;;
    --restow | -R) oper_text="Relinking" ;;
    *)
      echo "Unknown flag: $stow_flag"
      exit 1
      ;;
  esac

  # shellcheck disable=SC2068
  for module in ${modules[@]}; do
    local module_path="$modules_dir/$module"

    if [ ! -d "$module_path" ]; then
      echo "Module $module does not exist"
      exit 1
    fi

    echo "$oper_text module $module"
    if [ "$continue_on_error" = true ]; then
      if ! pkg exec --skip-update "stow -t ${HOME} -d $modules_dir $stow_flag $module" 2>/dev/null; then
        echo "Warning: Failed to $oper_text module $module, skipping..."
        continue
      fi
    else
      pkg exec --skip-update "stow -t ${HOME} -d $modules_dir $stow_flag $module"
    fi
  done
}

get_modules_file() {
  echo "${DOTFILES_MODULES_FILE:-$DOTFILES_HOME/modules.txt}"
}

read_modules_file() {
  local modules_file="${1:-$(get_modules_file)}"

  if [ ! -f "$modules_file" ]; then
    echo "Module file not found: $modules_file"
    exit 1
  fi

  cat <"$modules_file" | sed -e 's/[[:space:]]*#.*// ; /^[[:space:]]*$/d'
}

remove_modules_from_file() {
  local modules_file
  modules_file="$(get_modules_file)"

  for module in "$@"; do
    sed -i.bak "/^${module}$/d" "$modules_file" && rm -f "${modules_file}.bak"
  done
}

add_modules_to_file() {
  local modules_file

  case "$1" in
    --file | -f)
      modules_file="$2"
      shift 2
      ;;
    *)
      modules_file="$(get_modules_file)"
      ;;
  esac

  local existing_modules
  IFS=$'\n' read -d '' -ra existing_modules < <(read_modules_file "$modules_file" 2>/dev/null && printf '\0') || true

  local new_modules=()
  for module in "$@"; do
    if printf '%s\n' "${existing_modules[@]}" | grep -q "^${module}$"; then
      echo "Module $module already exists"
    else
      echo "$module" >>"$modules_file"
      echo "Added module $module"
      new_modules+=("$module")
    fi
  done

  # Link newly added modules
  if [ "${#new_modules[@]}" -gt 0 ]; then
    echo "Linking new modules..."
    stow_modules -S "${new_modules[@]}"
  fi
}

install_modules() {
  local modules_dir="$DOTFILES_HOME/modules"
  local no_file_flag=false
  local modules_file=""
  local modules=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --file | -f)
        modules_file="$2"
        shift 2
        ;;
      --no-file)
        no_file_flag=true
        shift 1
        ;;
      --*)
        echo "Error: Unknown option: $1" >&2
        exit 1
        ;;
      *)
        modules+=("$1")
        shift
        ;;
    esac
  done

  for module in "${modules[@]}"; do
    # Check if module directory exists
    local module_path="$modules_dir/$module"
    if [ ! -d "$module_path" ]; then
      echo "Module $module does not exist"
      exit 1
    fi

    # Check for and run install.sh if it exists
    local install_script="$module_path/install.sh"
    if [ -f "$install_script" ] && [ -x "$install_script" ]; then
      echo "Running install script for module $module"
      if ! (cd "$module_path" && ./install.sh); then
        echo "Install script failed for module $module"
        exit 1
      fi
    else
      echo "No install script found for module $module"
    fi

    # Add module to file after install script (unless --no-file is specified)
    if [ "$no_file_flag" = false ]; then
      if [ -n "$modules_file" ]; then
        add_modules_to_file --file "$modules_file" "$module"
      else
        add_modules_to_file "$module"
      fi
    fi
  done
}

write_modules_file() {
  local modules_file
  local modules=()

  case "$1" in
    --file | -f)
      modules_file="$2"
      shift 2
      ;;
    *) ;;
  esac

  local modules=("${@}")

  if [ "${#modules[@]}" -eq 0 ]; then
    echo "No modules specified"
    exit 1
  fi

  if [ -z "$modules_file" ]; then
    modules_file="$(get_modules_file)"
  fi

  cat <<EOF >|"$modules_file"
$(
    IFS=$'\n'
    echo "${modules[*]}"
  )
EOF
}

main() {
  cmd="$1"
  [ -n "$cmd" ] && shift

  case "$cmd" in
    list | ls)
      list_modules "$@"
      ;;
    link | ln)
      link "$@"
      ;;
    unlink | rm)
      unlink "$@"
      ;;
    add)
      add_modules_to_file "$@"
      ;;
    install | i)
      install_modules "$@"
      ;;
    read-file | r)
      read_modules_file "$@"
      ;;
    write-file | w)
      write_modules_file "$@"
      ;;
    file-path)
      get_modules_file
      ;;
    help | --help | -h)
      usage
      ;;
    *)
      usage
      ;;
  esac
}

main "$@"
